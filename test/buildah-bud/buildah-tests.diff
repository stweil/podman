From a2cf44e9b58955d682626e95b493450242fb8394 Mon Sep 17 00:00:00 2001
From: Ed Santiago <santiago@redhat.com>
Date: Tue, 9 Feb 2021 17:28:05 -0700
Subject: [PATCH] tweaks for running buildah tests under podman

Signed-off-by: Ed Santiago <santiago@redhat.com>
---
 tests/helpers.bash | 69 ++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 66 insertions(+), 3 deletions(-)

diff --git a/tests/helpers.bash b/tests/helpers.bash
index b5713550..34fcfa3a 100644
--- a/tests/helpers.bash
+++ b/tests/helpers.bash
@@ -43,6 +43,23 @@ EOF
     ROOTDIR_OPTS="--root ${TESTDIR}/root --runroot ${TESTDIR}/runroot --storage-driver ${STORAGE_DRIVER}"
     BUILDAH_REGISTRY_OPTS="--registries-conf ${TESTSDIR}/registries.conf --registries-conf-dir ${TESTDIR}/registries.d --short-name-alias-conf ${TESTDIR}/cache/shortnames.conf"
     PODMAN_REGISTRY_OPTS="--registries-conf ${TESTSDIR}/registries.conf"
+
+    PODMAN_SERVER_PID=
+    PODMAN_NATIVE="${PODMAN_BINARY} ${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+    if [[ -n "$REMOTE" ]]; then
+        PODMAN_NATIVE="${PODMAN_BINARY%%-remote} ${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+        # static CONTAINERS_CONF needed for capabilities test. As of 2021-07-01
+        # no tests in bud.bats override this; if at some point any test does
+        # so, it will probably need to be skip_if_remote()d.
+        env CONTAINERS_CONF=${CONTAINERS_CONF:-$(dirname ${BASH_SOURCE})/containers.conf} $PODMAN_NATIVE system service --timeout=0  &
+        PODMAN_SERVER_PID=$!
+        local timeout=10
+        while ((timeout > 0)); do
+            test -S /run/podman/podman.sock && return
+            sleep 0.2
+        done
+        die "podman server never came up"
+    fi
 }
 
 function starthttpd() {
@@ -86,6 +103,12 @@ function teardown_tests() {
     stop_git_daemon
     stop_registry
 
+    if [[ -n "$PODMAN_SERVER_PID" ]]; then
+        kill $PODMAN_SERVER_PID
+        wait $PODMAN_SERVER_PID
+        rm -f /run/podman/podman.sock
+    fi
+
     # Workaround for #1991 - buildah + overlayfs leaks mount points.
     # Many tests leave behind /var/tmp/.../root/overlay and sub-mounts;
     # let's find those and clean them up, otherwise 'rm -rf' fails.
@@ -178,6 +201,10 @@ function podman() {
     command ${PODMAN_BINARY:-podman} ${PODMAN_REGISTRY_OPTS} ${ROOTDIR_OPTS} "$@"
 }
 
+function podman-remote() {
+    command ${PODMAN_BINARY:-podman-remote} ${ROOTDIR_OPTS} "$@"
+}
+
 # There are various scenarios where we would like to execute `tests` as rootless user, however certain commands like `buildah mount`
 # do not work in rootless session since a normal user cannot mount a filesystem unless they're in a user namespace along with its
 # own mount namespace. In order to run such specific commands from a rootless session we must perform `buildah unshare`.
@@ -239,8 +266,35 @@ function run_buildah() {
         --retry)         retry=3;        shift;;  # retry network flakes
     esac
 
+    local podman_or_buildah=${BUILDAH_BINARY}
+    local _opts="${ROOTDIR_OPTS} ${BUILDAH_REGISTRY_OPTS}"
+    if [[ $1 == "build" || $1 == "build-using-dockerfile" ]]; then
+        shift
+        # podman defaults to --layers=true; buildah to --false.
+        # If command line includes explicit --layers, leave it untouched,
+        # but otherwise update command line so podman mimics buildah default.
+        if [[ "$*" =~ --layers || "$*" =~ --squash ]]; then
+            set "build" "--force-rm=false" "$@"
+        else
+            set "build" "--force-rm=false" "--layers=false" "$@"
+        fi
+        podman_or_buildah=${PODMAN_BINARY}
+        _opts="${ROOTDIR_OPTS} ${PODMAN_REGISTRY_OPTS}"
+        if [[ -n "$REMOTE" ]]; then
+            _opts=
+        fi
+
+        # podman always exits 125 where buildah exits 1 or 2 (or, in the
+        # case of git, 128, which is a bug in git, but I won't harp on that).
+        case $expected_rc in
+            1|2|128)   expected_rc=125 ;;
+        esac
+    fi
+    local cmd_basename=$(basename ${podman_or_buildah})
+
+
     # Remember command args, for possible use in later diagnostic messages
-    MOST_RECENT_BUILDAH_COMMAND="buildah $*"
+    MOST_RECENT_BUILDAH_COMMAND="$cmd_basename $*"
 
     # If session is rootless and `buildah mount` is invoked, perform unshare,
     # since normal user cannot mount a filesystem unless they're in a user namespace along with its own mount namespace.
@@ -254,8 +308,8 @@ function run_buildah() {
         retry=$(( retry - 1 ))
 
         # stdout is only emitted upon error; this echo is to help a debugger
-        echo "\$ $BUILDAH_BINARY $*"
-        run env CONTAINERS_CONF=${CONTAINERS_CONF:-$(dirname ${BASH_SOURCE})/containers.conf} timeout --foreground --kill=10 $BUILDAH_TIMEOUT ${BUILDAH_BINARY} ${BUILDAH_REGISTRY_OPTS} ${ROOTDIR_OPTS} "$@"
+        echo "\$ $cmd_basename $*"
+        run env CONTAINERS_CONF=${CONTAINERS_CONF:-$(dirname ${BASH_SOURCE})/containers.conf} timeout --foreground --kill=10 $BUILDAH_TIMEOUT ${podman_or_buildah} ${_opts} "$@"
         # without "quotes", multiple lines are glommed together into one
         if [ -n "$output" ]; then
             echo "$output"
@@ -587,6 +641,15 @@ function skip_if_no_docker() {
   fi
 }
 
+####################
+#  skip_if_remote  #  (only applicable for podman)
+####################
+function skip_if_remote() {
+    if [[ -n "$REMOTE" ]]; then
+        skip "${1:-test does not work with podman-remote}"
+    fi
+}
+
 function start_git_daemon() {
   daemondir=${TESTDIR}/git-daemon
   mkdir -p ${daemondir}/repo
-- 
2.35.1

